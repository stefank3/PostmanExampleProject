name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target env (Production/UAT/Staging/Dev)"
        required: false
        default: "Staging"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Shared environment mapping (friendly -> config files) ----------
  resolve-env:
    name: Resolve environment config
    runs-on: ubuntu-latest
    outputs:
      cfg_json: ${{ steps.map.outputs.cfg_json }}
      postman_env: ${{ steps.map.outputs.postman_env }}
      base_url: ${{ steps.map.outputs.base_url }}
    steps:
      - name: Map environment
        id: map
        run: |
          ENV_INPUT="${{ github.event.inputs.environment || 'Staging' }}"
          case "$ENV_INPUT" in
            Production|Live|LIVE) CFG_JSON="live-config.json"; POSTMAN_ENV="postman/live.postman_environment.json"; BASE_URL="${{ secrets.LIVE_BASE_URL }}" ;;
            UAT|Uat)              CFG_JSON="uat-config.json";  POSTMAN_ENV="postman/uat.postman_environment.json";  BASE_URL="${{ secrets.UAT_BASE_URL }}" ;;
            Staging|Stage)        CFG_JSON="stage-config.json";POSTMAN_ENV="postman/stage.postman_environment.json";BASE_URL="${{ secrets.STAGE_BASE_URL }}" ;;
            Dev|Development|DEV)  CFG_JSON="dev-config.json";  POSTMAN_ENV="postman/dev.postman_environment.json";  BASE_URL="${{ secrets.DEV_BASE_URL }}" ;;
            *)                    CFG_JSON="stage-config.json";POSTMAN_ENV="postman/stage.postman_environment.json";BASE_URL="${{ secrets.STAGE_BASE_URL }}" ;;
          esac
          echo "cfg_json=$CFG_JSON" >> "$GITHUB_OUTPUT"
          echo "postman_env=$POSTMAN_ENV" >> "$GITHUB_OUTPUT"
          echo "base_url=$BASE_URL" >> "$GITHUB_OUTPUT"

  # ---------- Java + Selenium (Maven) ----------
  java-selenium:
    name: Java + Selenium
    runs-on: ubuntu-latest
    needs: resolve-env
    if: ${{ !github.event.pull_request || contains(join(fromJson('[".github","java","selenium","pom.xml","src"]')), '') || true }}
    defaults:
      run:
        working-directory: java/selenium
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Chrome for headless tests
        uses: browser-actions/setup-chrome@v1

      - name: Maven test (with env)
        env:
          BASE_URL: ${{ needs.resolve-env.outputs.base_url }}
          CONFIG_FILE: ${{ needs.resolve-env.outputs.cfg_json }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          # Example of passing config to tests. Adapt to your framework flags/profiles.
          mvn -B -DskipTests=false -DconfigFile=$CONFIG_FILE -DbaseUrl=$BASE_URL clean test

      - name: Upload surefire/failsafe + screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: java-selenium-artifacts
          path: |
            **/target/surefire-reports/**
            **/target/failsafe-reports/**
            **/target/allure-results/**
            **/screenshots/**
          retention-days: 7

  # ---------- Postman (Newman) ----------
  postman:
    name: Postman (Newman)
    runs-on: ubuntu-latest
    needs: resolve-env
    defaults:
      run:
        working-directory: postman
    steps:
      - uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install newman & reporters
        run: |
          npm ci || npm i
          npm i -D newman newman-reporter-htmlextra junit-report-builder

      - name: Run Newman collection
        env:
          BASE_URL: ${{ needs.resolve-env.outputs.base_url }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          mkdir -p reports
          npx newman run ./collections/api.postman_collection.json \
            -e "../${{ needs.resolve-env.outputs.postman_env }}" \
            --env-var "baseUrl=$BASE_URL" \
            --env-var "apiToken=${API_TOKEN}" \
            --delay-request 50 \
            --reporters cli,junit,htmlextra \
            --reporter-junit-export "reports/junit.xml" \
            --reporter-htmlextra-export "reports/report.html" \
            --color on

      - name: Upload Newman reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-reports
          path: postman/reports/**
          retention-days: 7

  # ---------- Playwright (TS/JS) ----------
  playwright:
    name: Playwright (TS/JS)
    runs-on: ubuntu-latest
    needs: resolve-env
    defaults:
      run:
        working-directory: ui/playwright
    steps:
      - uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: ui/playwright/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        env:
          BASE_URL: ${{ needs.resolve-env.outputs.base_url }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
          CONFIG_FILE: ${{ needs.resolve-env.outputs.cfg_json }}
        run: |
          # Pass env/config into your config file or test fixtures as needed
          npx playwright test --reporter=line,junit

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            playwright-report/**
            test-results/**
            junit-report.xml
            screenshots/**
            videos/**
          retention-days: 7
